# -*- coding: utf-8 -*-
"""APP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GJ159E8niXc8nu8VV3DZKzI_11Easjv-
"""

import streamlit as st
import pickle
import numpy as np
import pandas as pd
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
from category_encoders import TargetEncoder

# Load from pickle
with open('xgb_model.pickle', 'rb') as f:
    saved_data = pickle.load(f)
    loaded_model = saved_data['model']
    loaded_scaler = saved_data['scaler']
    loaded_encoders = saved_data['encoders']
    loaded_outlier_bounds = saved_data['outlier_bounds']
    loaded_median_income = saved_data['median_income']

def preprocess_input(input_data):
    input_df = pd.DataFrame([input_data])

    # Handle missing data
    if pd.isnull(input_df['person_income'].iloc[0]):
        input_df['person_income'] = loaded_median_income

    # Encode categorical features
    input_df['person_gender'] = input_df['person_gender'].map(loaded_encoders['person_gender_encoder'])
    input_df['person_education'] = input_df['person_education'].map(loaded_encoders['education_encoder'])
    input_df['person_home_ownership'] = input_df['person_home_ownership'].map(loaded_encoders['home_ownership_encoder'])
    input_df['loan_intent'] = loaded_encoders['target_encoder'].transform(input_df[['loan_intent']])
    input_df['previous_loan_defaults_on_file'] = input_df['previous_loan_defaults_on_file'].map(
        loaded_encoders['loan_defaults_encoder'])

    # Handle outliers
    for col, (low, high) in loaded_outlier_bounds.items():
        input_df[col] = np.clip(input_df[col], low, high)

    # Scale
    scaled_data = loaded_scaler.transform(input_df)

    return scaled_data

def main():
    st.title('Loan Status Prediction App')


    with st.form("loan_form"):
        col1, col2 = st.columns(2)

        with col1:
            person_age = st.number_input('Age (years)', min_value=20, max_value=144)
            person_income = st.number_input('Annual Income', min_value=0)
            person_emp_exp = st.number_input('Employment Experience (years)', min_value=0, max_value=125)
            loan_amnt = st.number_input('Loan Amount', min_value=0, max_value=35000)
            loan_int_rate = st.number_input('Interest Rate', min_value=5.42, max_value=20.00)
            cb_person_cred_hist_length = st.number_input('Credit History Length (years)', min_value=2, max_value=30)
            credit_score = st.number_input('Credit Score', min_value=390, max_value=850)

        with col2:
            person_gender = st.selectbox('Gender', ['female', 'male'])
            person_education = st.selectbox('Education Level',
                                          ['High School', 'Associate', 'Bachelor', 'Master', 'Doctorate'])
            person_home_ownership = st.selectbox('Home Ownership',
                                               ['RENT', 'OWN', 'MORTGAGE', 'OTHER'])
            loan_intent = st.selectbox('Loan Intention',
                                     ['EDUCATION', 'MEDICAL', 'VENTURE', 'PERSONAL', 'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'])
            previous_loan_defaults = st.selectbox('Previous Loan Defaults', ['No', 'Yes'])


        submitted = st.form_submit_button("Predict Loan Status")

    if submitted:
        input_data = {
            'person_age': person_age,
            'person_gender': person_gender,
            'person_education': person_education,
            'person_income': person_income,
            'person_emp_exp': person_emp_exp,
            'person_home_ownership': person_home_ownership,
            'loan_amnt': loan_amnt,
            'loan_intent': loan_intent,
            'loan_int_rate': loan_int_rate,
            'loan_percent_income': loan_amnt/person_income if person_income > 0 else 0,
            'cb_person_cred_hist_length': cb_person_cred_hist_length,
            'credit_score': credit_score,
            'previous_loan_defaults_on_file': previous_loan_defaults
        }

        # Preprocess and predict
        processed_data = preprocess_input(input_data)
        prediction = loaded_model.predict(processed_data)

        # Show results
        st.subheader("Loan Status Result")
        if prediction[0] == 0:
            st.success("Loan Declined (Status: 0)")
        else:
            st.error("Loan Approved (Status: 1)")

if __name__ == '__main__':
    main()
